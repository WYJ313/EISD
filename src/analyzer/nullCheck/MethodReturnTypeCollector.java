package analyzer.nullCheck;

import java.io.File;
import java.io.FileOutputStream;
import java.io.PrintWriter;
import java.util.List;

import nameTable.NameTableManager;
import nameTable.creator.NameTableCreator;
import nameTable.filter.NameDefinitionKindFilter;
import nameTable.nameDefinition.DetailedTypeDefinition;
import nameTable.nameDefinition.MethodDefinition;
import nameTable.nameDefinition.NameDefinition;
import nameTable.nameDefinition.NameDefinitionKind;
import nameTable.nameDefinition.TypeDefinition;
import nameTable.nameReference.NameReferenceLabel;
import nameTable.nameReference.TypeReference;
import nameTable.visitor.NameDefinitionVisitor;
import sourceCodeAST.SourceCodeFileSet;
import sourceCodeAST.SourceCodeLocation;
import util.Debug;

public class MethodReturnTypeCollector {

	public static void main(String[] args) {
		String rootPath = "C:\\";

		
		String[] paths = {"C:\\QualitasPacking\\recent\\eclipse_SDK\\eclipse_SDK-4.3\\", "C:\\QualitasPacking\\recent\\jfreechart\\jfreechart-1.0.13\\", 
							rootPath + "ZxcWork\\JAnalyzer\\src\\", rootPath + "ZxcTools\\EclipseSource\\org\\", rootPath + "ZxcTemp\\testcase\\",
							rootPath + "ZxcWork\\ToolKit\\src\\sourceCodeAsTestCase\\CNExample.java", rootPath + "ZxcDeveloping\\OOPAndJavaExamples\\automata\\src\\", 
							rootPath + "ZxcProject\\AspectViz\\ZxcWork\\SortAnimator4\\", rootPath + "ZxcTools\\JDKSource\\", 
							rootPath + "ZxcCourse\\JavaProgramming\\JHotDraw5.2\\sources\\", rootPath + "ZxcWork\\FaultLocalization\\src\\", 
							rootPath + "ZxcTools\\ArgoUml\\", rootPath + "ZxcTools\\jEdit_5_1_0\\", 
							rootPath + "ZxcTools\\lucene_2_0_0\\", rootPath + "ZxcTools\\struts_2_0_1\\",
							rootPath + "ZxcTools\\apache_ant_1_9_3\\src\\", rootPath + "ZxcTools\\apache_ant_1_9_3\\src\\main\\org\\apache\\tools\\ant\\",
		};
		
		String path = paths[0];
		String result = rootPath + "ZxcWork\\ProgramAnalysis\\data\\result.txt";

		PrintWriter writer = new PrintWriter(System.out);
		PrintWriter output = new PrintWriter(System.out);
		
		try {
			writer = new PrintWriter(new FileOutputStream(new File(result)));
		} catch (Exception exc) {
			exc.printStackTrace();
			return;
		}
		
		try {
			String info = rootPath + "ZxcWork\\ProgramAnalysis\\data\\debug.txt";
			output = new PrintWriter(new FileOutputStream(new File(info)));
			Debug.setWriter(output);
			Debug.setScreenOn();
		} catch (Exception exc) {
			exc.printStackTrace();
			writer.close();
			return;
		}
		
		try {
			Debug.setStart("Begin collection....");
			collectAllMethodsReturnType(path, writer);
			Debug.time("After collection...");
		} catch (Exception exc) {
			exc.printStackTrace();
		}

		writer.close();
		output.close();
	}

	public static void collectAllMethodsReturnType(String path, PrintWriter writer) {
		SourceCodeFileSet parser = new SourceCodeFileSet(path);
		NameTableCreator creator = new NameTableCreator(parser);
		String[] fileNameArray = {"C:\\ZxcWork\\ToolKit\\data\\javalang.txt", "C:\\ZxcWork\\ToolKit\\data\\javautil.txt", "C:\\ZxcWork\\ToolKit\\data\\javaio.txt", }; 

		Debug.setStart("Begin creating system, path = " + path);
		NameTableManager manager = creator.createNameTableManager(new PrintWriter(System.out), fileNameArray);
		if (creator.hasError()) {
			System.out.println("There are " + creator.getErrorUnitNumber() + " error unit files:");
			creator.printErrorUnitList(new PrintWriter(System.out));
			System.out.println();
		}
		Debug.time("End creating.....");
		Debug.flush();
		
		NameDefinitionVisitor visitor = new NameDefinitionVisitor(new NameDefinitionKindFilter(NameDefinitionKind.NDK_METHOD));
		manager.accept(visitor);
		List<NameDefinition> methodList = visitor.getResult();
		
		String message = "No\tUnitFile\tClass\tMethod\tLocation\tReturnTypeRef\tReturnTypeDef\tIsPrimitive\tIsConstructor";
		int counter = 0;
		int constructorCounter = 0;
		int primitiveCounter = 0;
		
		writer.println(message);
		for (NameDefinition nameDefinition : methodList) {
			counter = counter+1;
			MethodDefinition method = (MethodDefinition)nameDefinition;
			if (method.isAutoGenerated()) continue; 
			TypeDefinition enclosingType = method.getEnclosingType();
			DetailedTypeDefinition type = (DetailedTypeDefinition)enclosingType;
			if (type.isAnonymous()) continue;
			
			SourceCodeLocation location = method.getLocation();
			String unitFile = location.getFileUnitName();
			String className = type.getSimpleName();
			String methodName = method.getSimpleName() + "()";
			String rowCol = "(" + location.getLineNumber() + "," + location.getColumn() + ")";
			TypeReference returnType = method.getReturnType(); 
			String returnTypeDef = "";
			String returnTypeRef = "";
			if (returnType != null) {
				returnTypeRef = returnType.getName();
				if (returnType.resolveBinding()) {
					returnTypeDef = returnType.getDefinition().getFullQualifiedName();
				}
			}
			String isPrimitive = "False";
			if (NameReferenceLabel.isPrimitiveTypeName(returnTypeRef)) {
				isPrimitive = "True";
				primitiveCounter++;
			}
			String isConstructor = "False";
			if (method.isConstructor()) {
				isConstructor = "True";
				constructorCounter++;
			}
			Debug.println("Method " + counter + ": " + className + "." + methodName + ", " + isPrimitive);
			writer.println(counter + "\t" + unitFile + "\t" + className + "\t" + methodName + "\t" + rowCol + "\t" + returnTypeRef + "\t" + returnTypeDef + "\t" + isPrimitive + "\t" + isConstructor);
		}
		
		double constructorRatio = ((double)constructorCounter/(double)counter);
		double primitiveRatio = ((double)primitiveCounter/(double)(counter-constructorCounter)); 
		Debug.println("Total " + counter + ", constructor " + constructorCounter + ", primitive return type " + primitiveCounter + ", constructor ratio " + constructorRatio + ", primitive ratio " + primitiveRatio);
		writer.println("Total " + counter + ", constructor " + constructorCounter + ", primitive return type " + primitiveCounter + ", constructor ratio " + constructorRatio + ", primitive ratio " + primitiveRatio);
	}
}
