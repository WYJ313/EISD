package sourceCodeAST;

import org.eclipse.jdt.core.dom.ASTNode;
import org.eclipse.jdt.core.dom.CompilationUnit;

/**
 * The class of the location in the source code. A location of the source code is determined by the line number
 * column, and the source file name.
 * @author Zhou Xiaocong
 * @since 2012/12/26
 * @version 1.0
 *
 */
public class SourceCodeLocation implements Comparable<SourceCodeLocation> {
	private int lineNumber = -1;		// The line number in the source code file
	private int column = -1;			// The column in the source code file
	private String fileUnitName = null;	// The file unit name (i.e. path name related to start path of the source code file set)

	public static final String FILE_NAME_BEGINNER = "@";
	public static final String LINE_COLUMN_SPLITTER = ":";
	
	/**
	 * @param lineNo: The line number in the source code file
	 * @param col: The column in the source code file
	 * @param fullFileName: The full file name (i.e. including the path of the file).
	 */
	public SourceCodeLocation(int lineNo, int col, String fileUnitName) {
		lineNumber = lineNo;
		column = col;
		this.fileUnitName = fileUnitName;
	}

	public int getLineNumber() {
		return lineNumber;
	}

	public int getColumn() {
		return column;
	}

	public String getFileUnitName() {
		return fileUnitName;
	}
	
	@Override
	public String toString() {
		return "" + lineNumber + LINE_COLUMN_SPLITTER + column;
	}
	
	public String getUniqueId() {
		return lineNumber + LINE_COLUMN_SPLITTER + column + FILE_NAME_BEGINNER + fileUnitName;
	}

	public static String getFileUnitNameFromId(String id) {
		int indexOfAt = id.indexOf(FILE_NAME_BEGINNER);
		if (indexOfAt < 0) return null;
		return id.substring(indexOfAt+1);
	}

	/**
	 * Get a location object from a location string. We assume that the locationString is a full string of location
	 * generated by the method SourceCodeLocation.toFullString(), that it, it has the format as "lineNo:Column@fileName";  
	 */
	public static SourceCodeLocation getLocation(String locationString) {
		int colonIndex = locationString.indexOf(LINE_COLUMN_SPLITTER);
		int atIndex = locationString.indexOf(FILE_NAME_BEGINNER);
		
		if (colonIndex < 0 || atIndex < 0 || atIndex <= colonIndex || atIndex >= locationString.length()) 
			throw new AssertionError("Can not find : or @ in the location string, or illegal location string [" + locationString + "]");

		try {
			String lineString = locationString.substring(0, colonIndex);
			int lineNumber = Integer.parseInt(lineString);
			
			String colString = locationString.substring(colonIndex+1, atIndex);
			int column = Integer.parseInt(colString);
			
			String fileName = locationString.substring(atIndex+1, locationString.length());
			return new SourceCodeLocation(lineNumber, column, fileName);
		} catch (NumberFormatException exc) {
			throw new AssertionError("Illegal location string [" + locationString + "]");
		}
	}
	
	@Override
	public int compareTo(SourceCodeLocation other) {
		if (this == other) return 0;
		
		if (fileUnitName == null) {
			if (other.fileUnitName != null) return -1;
		} else {
			if (other.fileUnitName == null) return 1;
			else {
				int result = fileUnitName.compareTo(other.fileUnitName);
				if (result != 0) return result;
			}
		}
		if (lineNumber != other.lineNumber) return (lineNumber - other.lineNumber);
		return column - other.column;
	}
	
	/**
	 * Check the current location is between start and end or not
	 */
	public boolean isBetween(SourceCodeLocation start, SourceCodeLocation end) {
		if (start == null || end == null) return false;
		if (!fileUnitName.equals(start.fileUnitName) || !fileUnitName.equals(end.fileUnitName))return false;
		if (lineNumber < start.lineNumber) return false;
		if (lineNumber > end.lineNumber) return false;
		if (lineNumber == start.lineNumber && column < start.column) return false;
		if (lineNumber == end.lineNumber && column > end.column) return false; 
		return true;
	}
	
	@Override
	public boolean equals(Object other) {
		if (this == other) return true;
		if (other == null) return false;
		if (!(other instanceof SourceCodeLocation)) return false;
		SourceCodeLocation otherLocation = (SourceCodeLocation)other;
		
		if (fileUnitName == null) {
			if (otherLocation.fileUnitName != null) return false;
		} else {
			if (otherLocation.fileUnitName == null) return false;
			if (!fileUnitName.equals(otherLocation.fileUnitName)) return false;
		}
		if (lineNumber != otherLocation.lineNumber || column != otherLocation.column) return false;
		return true;
	}
	
	@Override
	public int hashCode() {
		int result = 17;
		if (fileUnitName != null) result = fileUnitName.hashCode();
		result = 31 * result + lineNumber;
		result = 31 * result + column;
		return result;
	}
	
	public static SourceCodeLocation getStartLocation(ASTNode node, CompilationUnit root, String compilationUnitFileName) {
		int position = node.getStartPosition();
		int lineNumber = root.getLineNumber(position);
		int column = root.getColumnNumber(position);
		
		if (lineNumber < 0 || column < 0) { 
			System.out.println("Node type: " + node.getNodeType() + ", position: " + position + ", node: ");
			System.out.println(node);
			System.out.println("compilation unit: " + compilationUnitFileName + ", root: ");
			System.out.println(root);
			throw new AssertionError("Get illegal linenumber(" + lineNumber + ") or column(" + column + ") for AST node: " + node.toString());
		}
		return new SourceCodeLocation(lineNumber, column, compilationUnitFileName);
	}

	public static SourceCodeLocation getEndLocation(ASTNode node, CompilationUnit root, String compilationUnitFileName) {
		int position = node.getStartPosition() + node.getLength() - 1;
		int lineNumber = root.getLineNumber(position);
		int column = root.getColumnNumber(position) + 1;
		
		if (lineNumber < 0 || column < 0) {
			throw new AssertionError("Get illegal linenumber(" + lineNumber + ") or column(" + column + ") for position [" + position + "] of AST node: " + node.toString());
		}
		return new SourceCodeLocation(lineNumber, column, compilationUnitFileName);
	}

}
